#pragma OPENCL EXTENSION cl_khr_fp64: enable

#define NVECS {{nvecs}}
#define LOCAL_SIZE {{local_size}}
#define tidx get_local_id(0)

/*****
 * Utilities
 *****/


/* Multiply four 16-bit ints and produce 64-bit result safely. */
inline unsigned long prod4_16(unsigned short a, unsigned short b,
                              unsigned short c, unsigned short d) {
  return (unsigned long)((unsigned int)a * b) * ((unsigned int)c * d);
}

double get_c(unsigned short m, unsigned short l) {
  double num = prod4_16(l - m + 1, l - m + 2,
                        l + m + 1, l + m + 2);
  double den = prod4_16(2 * l + 1, 2 * l + 3,
                        2 * l + 3, 2 * l + 5);
  return sqrt(num / den);
}

double get_d(unsigned short m, unsigned short l) {
  double num = 2 * l * (l + 1) - 2 * m * m - 1;
  double den = (2 * l - 1) * (2 * l + 3);
  return num / den;
}


/*****
 * Main code
 *****/





/*****
 * Kernel entry points
 *****/

kernel void transpose_legendre_transform(int m, int lmin, int nk, int nx,
                                         global const double *x_squared,
                                         global const double *Lambda_0,
                                         global const double *Lambda_1,
                                         global const double *q,
                                         global double *out) {
  /* Local scratch */
  local double out_work[NVECS * LOCAL_SIZE]; /* shape=(NVECS, LOCAL_SIZE) */

  int iblock = get_global_id(0) / LOCAL_SIZE;
  int ix = get_local_id(0);
  double c, cp, cpp, d, dp, x, y;
  double Pval, Pval_prev, Pval_prevprev;
  
  /* Shift to our block */
  x_squared += iblock * nx;
  Lambda_0 += iblock * nx;
  Lambda_1 += iblock * nx;
  q += iblock * nx * NVECS;
  out += iblock * nk * NVECS;

  double xsq_val = x_squared[ix];

  for (int i = 0; i != NVECS * LOCAL_SIZE; ++i) {
    out_work[i] = -1;
  }
  barrier(CLK_LOCAL_MEM_FENCE);
      
  cpp = get_c(m, lmin);
  cp = get_c(m, lmin + 2);
  dp = get_d(m, lmin + 2);

  Pval_prevprev = Lambda_0[ix];
  Pval_prev = Lambda_1[ix];
  Pval = Pval_prev;

  int k;
  /* Handle matvec of first two rows */

  /* Matvec row 0  */
  k = 0;
  for (int j = 0; j != NVECS; ++j) {
    out_work[j * LOCAL_SIZE + tidx] = Pval_prevprev * q[j * nx + ix];
  }    
  /* Then a very stupid reduction */
  barrier(CLK_LOCAL_MEM_FENCE);
  if (tidx == 0) {
    for (int j = 0; j != NVECS; ++j) {
      double s = 0;
      for (int t = 0; t != LOCAL_SIZE; ++t) {
        s += out_work[j * LOCAL_SIZE + t];
      }
      out[j * nk + k] = s;
    }
  }
  barrier(CLK_LOCAL_MEM_FENCE);

  k = 1;
  for (int j = 0; j != NVECS; ++j) {
    out_work[j * LOCAL_SIZE + tidx] = Pval_prev * q[j * nx + ix];
  }    
  /* Then a very stupid reduction */
  barrier(CLK_LOCAL_MEM_FENCE);
  if (tidx == 0) {
    for (int j = 0; j != NVECS; ++j) {
      double s = 0;
      for (int t = 0; t != LOCAL_SIZE; ++t) {
        s += out_work[j * LOCAL_SIZE + t];
      }
      out[j * nk + k] = s;
    }
  }
  barrier(CLK_LOCAL_MEM_FENCE);


  /* Recurrence */

  for (int k = 2; k != nk; ++k) {
    /* Compute auxiliary scalars */
    c = get_c(m, lmin + 2 * k);
    d = get_d(m, lmin + 2 * k);
    
    double alpha = -dp;
    double beta = 1 / cp;
    double gamma = -cpp / cp;

    cpp = cp;
    cp = c;
    dp = d;

    /* Do recurrence */
    Pval = (xsq_val + alpha) * beta * Pval_prev + gamma * Pval_prevprev;
    Pval_prevprev = Pval_prev;
    Pval_prev = Pval;

    /* Do matvec: First compute our contribution... */
    for (int j = 0; j != NVECS; ++j) {
      out_work[j * LOCAL_SIZE + tidx] = Pval * q[j * nx + ix];
    }    
    /* Then a very stupid reduction */
    barrier(CLK_LOCAL_MEM_FENCE);
    if (tidx == 0) {
      for (int j = 0; j != NVECS; ++j) {
        double s = 0;
        for (int t = 0; t != LOCAL_SIZE; ++t) {
          s += out_work[j * LOCAL_SIZE + t];
        }
        out[j * nk + k] = s;
      }
    }
    barrier(CLK_LOCAL_MEM_FENCE);
  }

}
