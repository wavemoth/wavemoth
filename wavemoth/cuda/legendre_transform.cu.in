#include <stdio.h>

{{py:
def log2(x):
    r = -1
    while x != 0:
        x //= 2
        r += 1
    return r

def idiv(x, y): # Because / followed by / destroys emacs formatting
    return x.__floordiv__(y)
}}

#define NVECS {{nvecs}}
#define NTHREADS {{nthreads}}
#define APPROXIMATE_AUX 0
#define MAX_NI {{max_ni}}
#define WS {{warp_size}}
{{py: nwarps = nthreads // warp_size}}
#define NWARPS {{nwarps}}
{{default memory_bank_count = warp_size}}
#define K_CHUNK {{k_chunk}}
#define I_CHUNK {{i_chunk}}
{{py: ws = warp_size}}

/* Cast to int to make it easier to printf, as all our integers are
   then 32-bit. */
#define ithread ((int)threadIdx.x)
#define iwarp (ithread / WS)


/*****
 * Utilities
 *****/
/*
void print_array(constant const char *msg, local double* arr, int len) {
  int i;
  printf("%s ", msg);
  for (i = 0; i != len; ++i) {
    printf("%e ", arr[i]);
  }
  printf("\n");
}

void print_array_glob(constant const char *msg, global double* arr, int len) {
  int i;
  printf("%s ", msg);
  for (i = 0; i != len; ++i) {
    printf("%e ", arr[i]);
  }
  printf("\n");
}
*/

/* Multiply four 16-bit ints and produce 64-bit result safely. */
inline __device__ unsigned long prod4_16(unsigned short a, unsigned short b,
                              unsigned short c, unsigned short d) {
  return (unsigned long)((unsigned int)a * b) * ((unsigned int)c * d);
}


/*****
 * Auxiliary value computation
 *****/

__device__ double get_c_squared_num(unsigned short m, unsigned short l) {
  return prod4_16(l - m + 1, l - m + 2,
                  l + m + 1, l + m + 2);
}

__device__ double get_c_squared_den(unsigned short m, unsigned short l) {
  return prod4_16(2 * l + 1, 2 * l + 3,
                  2 * l + 3, 2 * l + 5);
}

__device__ double get_c(unsigned short m, unsigned short l) {
  /* A reciprocial square-root of the inverse whould be faster,
     but cost 1 ulp precision, and this step is very amortized. */
#if APPROXIMATE_AUX
  return rsqrt(get_c_squared_den(m, l) / get_c_squared_num(m, l));
#else
  return sqrt(get_c_squared_num(m, l) / get_c_squared_den(m, l));
#endif
}

__device__ double get_c_inv(unsigned short m, unsigned short l) {
#if APPROXIMATE_AUX
  return rsqrt(get_c_squared_num(m, l) / get_c_squared_den(m, l));
#else
  return sqrt(get_c_squared_den(m, l) / get_c_squared_num(m, l));
#endif
}

__device__ double get_d(unsigned short m, unsigned short l) {
  double num = 2 * l * (l + 1) - 2 * m * m - 1;
  double den = (2 * l - 1) * (2 * l + 3);
  return num / den;
}

__device__ void compute_recurrence_auxiliaries(int m, int lmin,
                                               double *alpha,
                                               double *beta,
                                               double *gamma) {
  /* Let half of the warps handle alpha, the rest beta/gamma; taking
     care to take both branches when NWARPS==1. */
  {{def alphapart()}}
      alpha[k] = -get_d(m, l - 2);
  {{enddef}}

  {{def betagammapart()}}
      double cpp = get_c(m, l - 4);
      double cp_inv = get_c_inv(m, l - 2);
      beta[k] = cp_inv;
      gamma[k] = -cpp * cp_inv;
  {{enddef}}

  {{if nthreads == warp_size}}
    for (int k = ithread; k < K_CHUNK; k += NTHREADS) {
      int l = lmin + 2 * k;
      {{alphapart()}}
      {{betagammapart()}}
    }
  {{else}}
    {{py: nthreads_mid = (idiv(nwarps, 2) * warp_size)}}
    if (ithread < {{nthreads_mid}}) {
      for (int k = ithread; k < K_CHUNK; k += {{nthreads_mid}}) {
        int l = lmin + 2 * k;
        {{alphapart()}}
      }
    } else {
      for (int k = ithread - {{nthreads_mid}}; k < K_CHUNK; k += {{nthreads - nthreads_mid}}) {
        int l = lmin + 2 * k;
        {{betagammapart()}}
      }
    }
  {{endif}}
}

/*****
 * Parallel tree reduction w/ test case
 *****/

{{py:
class ReductionContext(object):
    def __init__(self, nextrow_func, store_func):
        self.all_buffers = set()
        self.free_buffers = set()
        self.nextrow_func = nextrow_func
        self.store_func = store_func

    def allocate_buf(self):
        if len(self.free_buffers) == 0:
            buffer = 'reduce_buf_%d' % len(self.all_buffers)
            self.all_buffers.add(buffer)
            self.free_buffers.add(buffer)
        return self.free_buffers.pop()

    def deallocate_buf(self, buffer):
        self.free_buffers.add(buffer)

}}

{{def block_add_reduce(buf_vname, out_vname)}}
  {{# TODO avoid bank conflicts }}
  {{out_vname}}[ithread] = {{buf_vname}}[reduce_idx] + {{buf_vname}}[reduce_idx + 2];
{{enddef}}

{{def reduce_worker(ctx, row_start, row_stop, out_vname)}}
  {{if row_stop - row_start == 1}}
    {{ctx.nextrow_func(row_start, out_vname)}}
  {{else}}
    {{py: buf_vname = ctx.allocate_buf()}}
    {{py: nrows = row_stop - row_start}}
    {{reduce_worker(ctx, row_start, row_start + idiv(nrows, 2), buf_vname)}}
    {{reduce_worker(ctx, row_start + idiv(nrows, 2), row_stop, '(%s + NTHREADS)' % buf_vname)}}

    /* Do pairwise reduction of values in buf and store result in out.
       For the final output, we call user code to do the store. */
    {{py: value_code = '%s[reduce_idx] + %s[reduce_idx + 2]' % (buf_vname, buf_vname)}}
    {{if out_vname is None}} /* first level */
      //output[ithread] = {{value_code}};
      {{ctx.store_func('(ithread % 2)', '((ithread % WS) / 2)', value_code)}}
    {{else}} /* inner level, store results for parent level */
      printf("%d: {{out_vname}}[%d] = {{buf_vname}}[%d] + {{buf_vname}}[%d] = %f + %f;\n",
         ithread, ithread, reduce_idx, reduce_idx + 2,
         {{buf_vname}}[reduce_idx], {{buf_vname}}[reduce_idx + 2]);

      {{out_vname}}[ithread] = {{value_code}};
    {{endif}}

    {{py: ctx.deallocate_buf(buf_vname)}}
  {{endif}}
{{enddef}}

{{def parallel_tree_reduction(final_out_vname, *args)}}
  {{py: ctx = ReductionContext(*args)}}

  {{py: body = reduce_worker(ctx, 0, 16, None)}}
  {{for buf in ctx.all_buffers}}
    __shared__ double {{buf}}[2 * NTHREADS];
  {{endfor}}
  int pair_idx = (ithread % WS) / 2;
  int reduce_idx = (ithread / WS) * 2 * WS + 4 * pair_idx + ithread % 2;
  printf("%d %d\n", ithread, reduce_idx);
  {{body}}
{{enddef}}

{{py: assert nvecs % 2 == 0}}
__global__ void test_reduce_kernel(const double *input, double *output) {
  /* Assume input has shape (nvecs, 16, nthreads), output shape
     (nvecs, 16, nwarps); this routine should sum over all threads in each
     warp, using the same parallel reduction algorithm as we use in
     transpose_legendre_transform. */

  /* Registers for loading row of input*/
  double mine, to_other;
  int odd;
  {{def nextrow(rowidx, outbuf)}}
    /* Load next row into registers -- in transpose_legendre_transform,
       this step is replaced by computation. The "computation order" must
       be arranged so that vec-number is reversed for every other thread... */
    odd = ithread % 2;
    mine = input[odd * 16 * NTHREADS + {{rowidx}} * NTHREADS + ithread];
    to_other = input[(1 - odd) * 16 * NTHREADS + {{rowidx}} * NTHREADS + ithread];
    /* Pair-of-two sum-reduction */
    {{outbuf}}[ithread] = to_other; /* Send q0 to neighbour thread */
    mine += {{outbuf}}[ithread + 1 - 2 * odd]; /* Fetch accumulation to q1 from neighbour */
    printf("%d: reading {{rowidx}}: %f\n", ithread, mine);
    {{outbuf}}[ithread] = mine; /* store interleaved: (j=0, j=1, j=0, j=1, ...) */
  {{enddef}}
  {{def store(vec_code, row_code, value_code)}}
  printf("%d: storing [%d,%d]=%f\n", ithread, {{vec_code}}, {{row_code}}, {{value_code}});
  output[{{vec_code}} * 16 * NWARPS + {{row_code}} * NWARPS + iwarp] = {{value_code}};
  {{enddef}}

  {{parallel_tree_reduction('output', nextrow, store)}}

}




/*****
 * Main code
 *****/

{{py:
kernel_or_not = [('__global__', '_kernel'),
                 ('__device__', '')]
}}
     
/* Do a dot product of the 1D vector P with NVECS vectors
   stored in q, and simultaneously copy P into local memory
   P_local. */
{{for spec, suffix in kernel_or_not}}
{{spec}} void dot_and_copy{{suffix}}(const double *P,
                                     const double *q,
                                     double *P_copy,
                                     double *work_sum,
                                     int ni) {
  double s[NVECS];
  for (int j = 0; j != NVECS; ++j) {
    s[j] = 0;
  }
  for (int i = ithread; i < ni; i += NTHREADS) {
    double Pval = P[i];
    P_copy[i] = Pval;
    for (int j = 0; j != NVECS; ++j) {
      s[j] += Pval * q[j * ni + i];
    }
  }
  for (int j = 0; j != NVECS; ++j) {
    work_sum[j * NTHREADS + ithread] = s[j];
  }
}
{{endfor}}

/* thread_sums[j, ithread] is summed over the threads in each warp and
   result placed in warp_sums[iwarp, k_offset, j].
   Contents of thread_sums is destructed in the process. */
{{for spec, suffix in kernel_or_not}}
{{spec}} void warp_sum_reduce{{suffix}}(int k_offset,
                                        double *thread_sums,
                                        double *warp_sums) {
    /* TODO: Use parallelism to work on multiple vectors in parallel... */
  {{for p in range(log2(warp_size))}}
  {{py:stride = 2**p}}
  if (ithread % {{2 * stride}} == 0) {
    for (int j = 0; j != NVECS; ++j) {
      {{if 2 * stride == warp_size}}
      {{# Write to warp_sums }}
      warp_sums[iwarp * K_CHUNK * NVECS + k_offset * NVECS + j] += 
        (thread_sums[j * NTHREADS + ithread] +
        thread_sums[j * NTHREADS + ithread + {{stride}}]);
      {{else}}
      {{# Write temporary result to thread_sums}}
      thread_sums[j * NTHREADS + ithread] += thread_sums[j * NTHREADS + ithread + {{stride}}];
    {{endif}}
    }
  }
  {{endfor}}
}
{{endfor}}


/* Sum up a number of output buffers (one per warp) in
   `work_local_sum`, and put the result in `out`.  `work_local_sum`
   is a 3D array indexed by [iwarp, k_offset, j] and dimensions
   (NWARPS, K_CHUNK, NVECS).
*/

{{for spec, suffix in kernel_or_not}}
{{spec}} void inter_warp_sum{{suffix}}(int k_start, int nk,
                                       double *work_local_sum,
                                       double *out,
                                       int out_stride) {
  /* Have threads divide evenly over the different vectors, gracefully
     handling different nk. */
  for (int idx = ithread; idx < NVECS * nk; idx += NTHREADS) {
    double s = 0;
    for (int t = 0; t != NWARPS; ++t) {
      s += work_local_sum[t * K_CHUNK * NVECS + idx]; /*idx == k * NVECS + j*/
    }
    int j = idx % NVECS;
    int k = idx / NVECS;
    out[j * out_stride + k_start + k] = s;
  }
}
{{endfor}}

/* Zero the accumulation buffer on a per-warp basis, so that no
   barrier is needed. work_local_sum is a 3D array indexed by [iwarp,
   k_offset, j] */
__device__ void zero_accumulation_buffer(double *work_local_sum) {
  for (int idx = ithread % WS; idx < NVECS * K_CHUNK; idx += WS) {
    work_local_sum[iwarp * K_CHUNK * NVECS + idx] = 0;
  }
}

/*****
 * Kernel entry points
 *****/

__global__ void transpose_legendre_transform(int m, int lmin, int nk, int ni,
                                             const double *x_squared,
                                             const double *Lambda_0,
                                             const double *Lambda_1,
                                             const double *q,
                                             double *work,
                                             double *out,
                                             int zero) {
  /* Scratch for auxiliary values */
  __shared__ double alpha[K_CHUNK], beta[K_CHUNK], gamma[K_CHUNK];

  /* Scratch for sum-reduction. We use the one column padding trick to
     avoid memory bank conflicts. See work_sum_idx for indexing.  */

  __shared__ double work_local_sum[NWARPS * K_CHUNK * NVECS];
  __shared__ double work_warp_sum[NTHREADS * NVECS];

  /*  if (get_local_size(0) != NTHREADS) {
    printf("Assertion get_local_size(0) == NTHREADS failed\n");
    printf("FAIL %d", *(int*)0);
    }*/

  int iblock = blockIdx.x;

  /* Buffer for temporarily storing Legendre function values */
  double *Lambda_pp = work + (2 * iblock) * MAX_NI;
  double *Lambda_p = work + (2 * iblock + 1) * MAX_NI;

  /* Shift to our block */
  x_squared += iblock * ni;
  Lambda_0 += iblock * ni;
  Lambda_1 += iblock * ni;
  q += iblock * ni * NVECS;
  out += iblock * nk * NVECS;

  /* First two rows are special as they are dot products. Each thread
     only stores values for its own local consumption, so no need for
     barrier. */
  zero_accumulation_buffer(work_local_sum);
  dot_and_copy(Lambda_0, q, Lambda_pp, work_warp_sum, ni);
  warp_sum_reduce(0, work_warp_sum, work_local_sum);
  dot_and_copy(Lambda_1, q, Lambda_p, work_warp_sum, ni);
  warp_sum_reduce(1, work_warp_sum, work_local_sum);
  __syncthreads();
  inter_warp_sum(0, 2, work_local_sum, out, nk);
  /* No barrier: Will hit barrier below before work_local_sum gets
     overwritten again, and we only write once to each element in
     out. */


  /* Blocking approach: Process blocks of size (K_CHUNK, I_CHUNK * NTHREADS).
     Within each block, local memory contains data needed for rows (k-axis),
     and registers contains data needed for columns (i-axis).
     The blocks are processed in row-wise order.
  */
  for (int k_block_start = 2; k_block_start < nk; k_block_start += K_CHUNK) {
    int k_block_len = min(K_CHUNK, nk - k_block_start);
    /* Compute auxiliaries for this row-block */
    compute_recurrence_auxiliaries(m, lmin + 2 * k_block_start,
                                   alpha, beta, gamma);

    __syncthreads();
    /* Zero accumulation scratch buffer */
    zero_accumulation_buffer(work_local_sum);

    /* Process all blocks on this block-row */
    for (int i_block_start = 0; i_block_start < ni; i_block_start += I_CHUNK * NTHREADS) {
      int i_block_len = min(NTHREADS * I_CHUNK, ni - i_block_start);

      double {{', '.join('Lambda_p_%d' % i for i in range(i_chunk))}};
      double {{', '.join('Lambda_pp_%d' % i for i in range(i_chunk))}};
      double {{', '.join('x_squared_%d' % i for i in range(i_chunk))}};
      double {{', '.join(['q_%d_%d' % (i, j) for i in range(i_chunk) for j in range(nvecs)])}};

      /* Read Lambdas, x_squared, and q from global memory into registers for this block */
      int i_offset = i_block_start + ithread;
      {{for ri in range(i_chunk)}}
        Lambda_pp_{{ri}} = Lambda_pp[i_offset + {{nthreads * ri}}];
        Lambda_p_{{ri}} = Lambda_p[i_offset + {{nthreads * ri}}];
        x_squared_{{ri}} = x_squared[i_offset + {{nthreads * ri}}];
        {{for rj in range(nvecs)}}
          q_{{ri}}_{{rj}} = q[{{rj}} * ni + i_offset + {{nthreads * ri}}];
        {{endfor}}
      {{endfor}}

      /* Process blocks row-wise. Given correct loop unrolling, this should
         maximize pipelining ability of each thread. */

      for (int kt = 0; kt != k_block_len; ++kt) {

        //if (ithread == 0) printf("%d kt=%d of %d\n", ithread, kt, k_block_len);
        /* Initialize accumulation registers for row */
        double {{', '.join('acc_%d = 0' % rj for rj in range(nvecs))}};

        /* Process row k=k_block_start + kt */
        double Lambda_val;
        {{for ri in range(i_chunk)}}
          Lambda_val =
            ((x_squared_{{ri}} + alpha[kt]) * beta[kt] * Lambda_p_{{ri}} +
             gamma[kt] * Lambda_pp_{{ri}});
          {{for rj in range(nvecs)}}
            acc_{{rj}} += Lambda_val * q_{{ri}}_{{rj}};
          {{endfor}}

          Lambda_pp_{{ri}} = Lambda_p_{{ri}};
          Lambda_p_{{ri}} = Lambda_val;
        {{endfor}}


        /* Before heading to the next row, we do a within-warp reduction
           of the accumulators. This is necesarry lest work_local_sum
           becomes too big, and cheap enough as we do not need any
           thread synchronization. First store in local memory...  */
        {{for rj in range(nvecs)}}
          work_warp_sum[{{rj * nthreads}} + ithread] = acc_{{rj}};
        {{endfor}}
        /* ...and then do the tree reduction. The target is copied into
           work_local_sum at kt. */
        if (zero) {
          warp_sum_reduce(kt, work_warp_sum, work_local_sum);
        }
      }


      /* Done with all rows in block; we should move to the block to
         our right.  Persist the Lambdas, to be read in again when we
         visit the row of blocks below. */
      i_offset = i_block_start + ithread;
      {{for ri in range(i_chunk)}}
        Lambda_pp[i_offset + {{nthreads * ri}}] = Lambda_pp_{{ri}};
        Lambda_p[i_offset + {{nthreads * ri}}] = Lambda_p_{{ri}};
      {{endfor}}
    }

    /* Done with row block. Do inter-warp accumulation and write to output
       before heading on to the next block. We let k=ithread, and have
       each thread sum over iwarp. */
    __syncthreads();
    inter_warp_sum(k_block_start, k_block_len,
                   work_local_sum, out, nk);
    /* Do not need another barrier here because the next iteration will
       hit the barrier after computing auxiliary values before it
       gets a chance to overwrite work_local_sum. */

  }

}
